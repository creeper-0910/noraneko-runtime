# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

on:
  workflow_call:
    inputs:
      debug:
        type: boolean
        default: true
      release:
        type: boolean
        default: true
      code-coverage:
        type: boolean
        default: false
      profile-generate-mode:
        type: boolean
        default: false
      build-with-profdata-and-jarlog:
        type: boolean
        required: false
      pgo:
        type: boolean
        default: false
      pgo_artifact_name:
        type: string
        required: false
      MOZ_BUILD_DATE:
        type: string
        required: false
        default: ""

jobs:
  build:
    # Only valid platform/arch combinations
    strategy:
      matrix:
        include:
          - platform: linux
            arch: x86_64
            runs-on: ubuntu-latest
          - platform: linux
            arch: aarch64
            runs-on: ubuntu-latest
          - platform: mac
            arch: x86_64
            runs-on: ubuntu-latest
          - platform: mac
            arch: aarch64
            runs-on: ubuntu-latest
          - platform: windows
            arch: x86_64
            runs-on: ubuntu-latest
    runs-on: ${{ matrix.runs-on }}

    steps:
      # Shared: Node.js, checkout, sccache
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Clone üß¨
        uses: actions/checkout@v4
        with:
          submodules: ${{ matrix.platform == 'mac' && 'recursive' || 'true' }}

      - name: Configure sccache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      # Platform-specific: Setup Rust
      - name: Setup Rust (linux/mac)
        if: matrix.platform == 'linux' || matrix.platform == 'mac'
        run: ./.github/workflows/scripts/setup-rust.sh ${{ matrix.platform }} ${{ matrix.arch }} ${{ inputs.build-with-profdata-and-jarlog || '' }}

      - name: Setup Rust (windows)
        if: matrix.platform == 'windows'
        run: ./.github/workflows/scripts/setup-rust.sh windows x86_64 ${{ inputs.pgo_artifact_name || '' }}
        env:
          GHA_pgo_artifact_name: ${{ inputs.pgo_artifact_name }}

      # Shared: Allocate swap
      - name: Allocate swap
        run: ./.github/workflows/scripts/allocate-swap.sh ${{ matrix.arch }}

      # Platform-specific: Download PGO Artifact
      - name: Download PGO Artifact if exists (mac)
        if: matrix.platform == 'mac' && inputs.build-with-profdata-and-jarlog
        uses: actions/download-artifact@v4
        with:
          name: noraneko-${{ matrix.arch }}-apple-darwin-profdata-and-jarlog
          path: ~/artifacts

      - name: Download PGO Artifact if exists (windows)
        if: matrix.platform == 'windows' && inputs.pgo_artifact_name
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.pgo_artifact_name }}
          path: ~/artifacts

      # Platform-specific: Setup noraneko
      - name: Setup noraneko (linux)
        if: matrix.platform == 'linux'
        run: ./.github/workflows/scripts/setup-noraneko.sh linux ${{ matrix.arch }} ${{ inputs.debug }} ${{ inputs.pgo }}

      - name: Setup noraneko (mac)
        if: matrix.platform == 'mac'
        run: ./.github/workflows/scripts/setup-noraneko.sh mac ${{ matrix.arch }} ${{ inputs.debug }} ${{ inputs.profile-generate-mode }} ${{ inputs.MOZ_BUILD_DATE }}

      - name: Setup noraneko (windows)
        if: matrix.platform == 'windows'
        run: ./.github/workflows/scripts/setup-noraneko.sh windows x86_64 ${{ inputs.debug }} ${{ inputs.profile-generate-mode }}
        env:
          GHA_debug: ${{ inputs.debug }}
          GHA_profgen: ${{ inputs.profile-generate-mode }}
          GHA_pgo_artifact_name: ${{ inputs.pgo_artifact_name }}

      # Platform-specific: Build & Package
      - name: Build & Package (linux)
        if: matrix.platform == 'linux'
        run: ./.github/workflows/scripts/build-and-package.sh linux ${{ matrix.arch }} ${{ inputs.pgo }}

      - name: Build & Package (mac)
        if: matrix.platform == 'mac'
        run: ./.github/workflows/scripts/build-and-package.sh mac ${{ matrix.arch }} ${{ inputs.profile-generate-mode }} ${{ inputs.MOZ_BUILD_DATE }}

      - name: Build & Package (windows)
        if: matrix.platform == 'windows'
        run: ./.github/workflows/scripts/build-and-package.sh windows x86_64 ${{ inputs.profile-generate-mode }}

      # Windows-specific artifact extraction
      - name: Remove same name uploaded artifacts
        if: matrix.platform == 'windows'
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            noraneko-win-x86_64-moz-artifact
            dist-host
            application-ini

      - name: extract moz-artifact
        if: matrix.platform == 'windows'
        run: |
          mkdir ~/output
          unzip obj-x86_64-pc-windows-msvc/dist/noraneko-*win64.zip -d ~/output
          cp ./obj-x86_64-pc-windows-msvc/dist/bin/application.ini ./nora-application.ini

      # Publish artifact (unified)
      - name: Publish Package Mozilla Artifact üéÅ
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ matrix.platform }}-${{ matrix.arch }}-moz-artifact
          path: ${{ matrix.platform == 'windows' && format('~/output/noraneko-{0}-{1}-moz-artifact.zip', matrix.platform, matrix.arch) || format('~/output/noraneko-{0}-{1}-moz-artifact.tar.xz', matrix.platform, matrix.arch) }}

      - name: Publish dist/host for MAR (linux)
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-dist-host
          path: obj-${{ matrix.arch }}-*-linux-gnu/dist/host/
          overwrite: true

      - name: Publish nora-application.ini for MAR (linux)
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-application-ini
          path: ./nora-application.ini
          overwrite: true

      - name: Publish dist/* for generate profile (windows)
        if: matrix.platform == 'windows' && inputs.profile-generate-mode
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-win-x86_64-profile-generate-mode-package
          path: obj-x86_64-pc-windows-msvc/dist/

      - name: Publish dist/host for MAR (windows)
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: win-x86_64-dist-host
          path: obj-x86_64-pc-windows-msvc/dist/host/
          overwrite: true

      - name: Publish nora-application.ini for MAR (windows)
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: win-x86_64-application-ini
          path: ./nora-application.ini
          overwrite: true
