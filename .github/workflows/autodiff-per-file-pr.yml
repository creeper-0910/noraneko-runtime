# SPDX-License-Identifier: MPL-2.0

name: F3liz Bot Per File Patches

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [synchronize]

jobs:
  f3liz-bot-per-file:
    if: |
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '@f3liz-bot patch'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.event.issue.pull_request.head.ref }}
          fetch-depth: 0

      - name: Set up Git config
        run: |
          git config user.name "f3liz-bot[bot]"
          git config user.email "230694705+f3liz-bot@users.noreply.github.com"

      - name: Get PR info
        id: pr_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
            PR_INFO=$(gh pr view $PR_NUMBER --json headRefName,baseRefName)
            HEAD_REF=$(echo "$PR_INFO" | jq -r .headRefName)
            BASE_REF=$(echo "$PR_INFO" | jq -r .baseRefName)
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
            HEAD_REF=${{ github.event.pull_request.head.ref }}
            BASE_REF=${{ github.event.pull_request.base.ref }}
          fi
          
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
          echo "BASE_REF=$BASE_REF" >> $GITHUB_ENV

      - name: Checkout correct branch for comment events
        if: github.event_name == 'issue_comment'
        run: git checkout $HEAD_REF

      - name: Fetch PR base
        run: git fetch origin $BASE_REF:base_branch

      - name: Check for valid bot command and abort if needed
        if: github.event_name == 'issue_comment'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          if ! echo "$COMMENT_BODY" | grep -q '@f3liz-bot patch'; then
            echo "No valid @f3liz-bot patch command found in comment. Aborting."
            exit 1
          fi
          echo "Valid @f3liz-bot patch command found."

      - name: Get list of patches to remove from bot commands
        id: list_rm_patches
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PATCH_DIR=".github/patches/upstream"
          rm -f f3liz_rm_list.txt

          gh pr view $PR_NUMBER --json comments -q '.comments[].body' \
            | grep -E '@f3liz-bot.*patch' \
            | grep -oE 'rm=[^ ]+' \
            | sed 's/rm=//' \
            | tr ',' '\n' \
            | sed 's/$/\.patch/' > f3liz_rm_list.txt || true

          gh pr view $PR_NUMBER --json body -q .body \
            | grep -E '@f3liz-bot.*patch' \
            | grep -oE 'rm=[^ ]+' \
            | sed 's/rm=//' \
            | tr ',' '\n' \
            | sed 's/$/\.patch/' >> f3liz_rm_list.txt || true

          sort f3liz_rm_list.txt | uniq | grep -v '^$' > f3liz_rm_list_final.txt || touch f3liz_rm_list_final.txt
          mv f3liz_rm_list_final.txt f3liz_rm_list.txt

          echo "Patches to remove:"
          cat f3liz_rm_list.txt || echo "No patches to remove"

      - name: Remove patches listed by f3liz-bot commands
        run: |
          PATCH_DIR=".github/patches/upstream"
          if [ -d "$PATCH_DIR" ]; then
            while read PATCH_NAME; do
              [ -z "$PATCH_NAME" ] && continue
              PATCH_PATH="$PATCH_DIR/$PATCH_NAME"
              if [ -f "$PATCH_PATH" ]; then
                rm -f "$PATCH_PATH"
                echo "Removed $PATCH_PATH"
              fi
            done < f3liz_rm_list.txt
          fi

      - name: Check all patches apply cleanly
        id: patch_check
        run: |
          PATCH_DIR=".github/patches/upstream"
          HAS_FAILED=0
          
          if [ -d "$PATCH_DIR" ]; then
            for patch in "$PATCH_DIR"/*.patch; do
              [ -e "$patch" ] || continue
              PATCH_NAME="$(basename "$patch")"
              
              if git apply --check "$patch"; then
                echo "Patch $PATCH_NAME applies cleanly."
              else
                echo "ERROR: Patch $PATCH_NAME failed to apply!" >&2
                HAS_FAILED=1
              fi
            done
          fi
          
          if [ "$HAS_FAILED" -ne 0 ]; then
            echo "One or more patches failed to apply cleanly. Aborting."
            exit 1
          fi

      - name: Generate per-file patches
        if: success() && steps.patch_check.conclusion == 'success'
        run: |
          PATCH_DIR=".github/patches/upstream"
          mkdir -p "$PATCH_DIR"
          BASE=base_branch
          
          git diff --name-only $BASE | grep -vE '^(\.github|noraneko|browser/branding/noraneko)($|/)' > changed_files.txt || true
          
          while read file; do
            [ -z "$file" ] && continue
            patchfile="$PATCH_DIR/${file//\//-}.patch"
            git diff $BASE -- "$file" > "$patchfile"
            if [ ! -s "$patchfile" ]; then
              rm "$patchfile"
            fi
          done < changed_files.txt

      - name: Commit and push new patches
        if: success() && steps.patch_check.conclusion == 'success'
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No patch changes to commit."
          else
            git commit -m "chore: f3liz-bot per file patches"
            git push
          fi

      - name: Comment on success with changelog
        if: success() && github.event_name == 'issue_comment' && contains(github.event.comment.body, '@f3liz-bot patch')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let changelog = "## F3liz Bot Patch Update\n\n";
            
            try {
              const removedPatches = fs.readFileSync('f3liz_rm_list.txt', 'utf8').trim().split('\n').filter(p => p);
              if (removedPatches.length > 0 && removedPatches[0] !== '') {
                changelog += "### Removed Patches:\n";
                removedPatches.forEach(patch => {
                  changelog += `- ${patch}\n`;
                });
                changelog += "\n";
              }
            } catch (e) {
            }
            
            const { execSync } = require('child_process');
            try {
              const patchCount = execSync('find .github/patches/upstream -name "*.patch" -type f | wc -l', { encoding: 'utf8' }).trim();
              changelog += `### Generated Patches: ${patchCount} files\n\n`;
              
              const patchFiles = execSync('find .github/patches/upstream -name "*.patch" -type f | head -10', { encoding: 'utf8' }).trim().split('\n').filter(p => p);
              if (patchFiles.length > 0) {
                changelog += "### Updated Files:\n";
                patchFiles.forEach(patch => {
                  const filename = patch.replace('.github/patches/upstream/', '').replace('.patch', '').replace(/-/g, '/');
                  changelog += `- ${filename}\n`;
                });
                if (parseInt(patchCount) > 10) {
                  changelog += `- ... and ${parseInt(patchCount) - 10} more files\n`;
                }
              }
            } catch (e) {
              changelog += "### No patches generated\n";
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: changelog
            });

      - name: Comment on failure with workflow link
        if: failure() && github.event_name == 'issue_comment' && contains(github.event.comment.body, '@f3liz-bot patch')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const failureMessage = `## F3liz Bot Patch Update Failed\n\nThe patch update workflow encountered an error. Please check the [workflow run](${runUrl}) for details.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: failureMessage
            });
