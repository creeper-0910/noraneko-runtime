# SPDX-License-Identifier: MPL-2.0

name: Pull Upstream
on:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: write

jobs:
  pull-upstream-and-check-patches:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./noraneko_runtime
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0
          path: noraneko_runtime

      - name: Clone upstream firefox repository
        run: git clone -b release --single-branch https://github.com/mozilla-firefox/firefox --depth 1 ../upstream_release

      - name: Set git config
        run: |
          git config user.name "f3liz-bot[bot]"
          git config user.email "230694705+f3liz-bot@users.noreply.github.com"

      - name: Sync upstream files into working directory
        run: |
          rsync -a --delete --exclude='.git' --exclude='.github' --exclude='noraneko' --exclude='.gitmodules' ../upstream_release/ ./
          mv README.md MOZ_README.md

      - name: Normalize patch files for cross-platform compatibility
        run: |
          echo "Normalizing patch files..."
          find .github/patches/upstream -name "*.patch" -exec dos2unix {} \; 2>/dev/null || true
          for patch_file in .github/patches/upstream/*.patch; do
            if [ -s "$patch_file" ] && [ "$(tail -c1 "$patch_file" | wc -l)" -eq 0 ]; then
              echo "" >> "$patch_file"
            fi
          done

      - name: Check all patches apply cleanly
        id: patch_check
        run: |
          echo "Checking patches for compatibility..."
          HAS_FAILED=0
          FAILED_PATCHES=""
          
          if [ -d ".github/patches/upstream" ]; then
            for patch_file in .github/patches/upstream/*.patch; do
              [ -e "$patch_file" ] || continue
              patch_name=$(basename "$patch_file")
              
              if git apply --check --ignore-space-change --ignore-whitespace "$patch_file"; then
                echo "✓ $patch_name applies cleanly"
              else
                echo "✗ $patch_name failed to apply"
                FAILED_PATCHES="$FAILED_PATCHES\n- $patch_name"
                HAS_FAILED=1
              fi
            done
          fi
          
          if [ "$HAS_FAILED" -ne 0 ]; then
            echo "FAILED_PATCHES<<EOF" >> $GITHUB_ENV
            echo -e "$FAILED_PATCHES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "Some patches failed compatibility check"
            exit 1
          else
            echo "All patches are compatible with upstream changes"
          fi

      - name: Commit upstream sync without patches
        run: |
          if git diff --quiet --exit-code; then
            echo "No changes from upstream. Exiting."
            exit 0
          fi
          
          export FF_VERSION=$(cat browser/config/version.txt)
          git add .
          git commit -m "sync: upstream gecko-dev $FF_VERSION"
          git push origin main
