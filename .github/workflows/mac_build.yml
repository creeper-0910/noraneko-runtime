# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

on:
  workflow_call:
    inputs:
      release:
        type: boolean
        default: true
      debug:
        type: boolean
        default: true
      code-coverage:
        type: boolean
        default: false
      profile-generate-mode:
        type: boolean
        default: false
      build-with-profdata-and-jarlog:
          type: boolean
          required: false
      flat-chrome:
        type: boolean
        default: false
      MOZ_BUILD_DATE:
        type: string
        required: true
        default: ""

jobs:
  mac-build:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on: ["ubuntu-latest"]
        arch: [x86_64, aarch64]
    steps:
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "latest"

    - name: Clone üß¨
      uses: actions/checkout@v4
      with:
        submodules: "recursive"

    - name: Configure sccache
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: setup Rust ü¶Ä
      run: |
        # Install Rust if pgo_artifact_name is not empty
        if [[ -n $GHA_pgo_artifact_name ]]; then
          rustup toolchain install 1.81.0
          rustup default 1.81.0
        fi

        if [[ $GHA_ARCH == 'x86_64' ]];then
            rustup target add x86_64-apple-darwin
        else
            rustup target add aarch64-apple-darwin
        fi

        #? https://github.com/mozilla/sccache#known-caveats
        export CARGO_INCREMENTAL=0
      env:
        GHA_ARCH: ${{matrix.arch}}
        GHA_pgo_artifact_name: ${{inputs.build-with-profdata-and-jarlog}}

    - name: Allocate swap
      run: |
        echo Before:
        free -h
        df -h

        echo
        echo

        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile
        sudo fallocate -l 10G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo apt autoremove -y
        sudo apt clean
        sudo rm -rf  ./git
        sudo rm -rf /home/linuxbrew
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/local/graalvm
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /etc/apache2
        sudo rm -rf /etc/nginx
        sudo rm -rf /usr/local/share/chrome_driver
        sudo rm -rf /usr/local/share/edge_driver
        sudo rm -rf /usr/local/share/gecko_driver
        sudo rm -rf /usr/share/java
        sudo rm -rf /usr/share/miniconda
        sudo rm -rf /usr/local/share/vcpkg

        echo
        echo

        echo After:
        free -h
        df -h

    - name: Download PGO Artifact if exists
      if: inputs.build-with-profdata-and-jarlog
      uses: actions/download-artifact@v4
      with:
        name: noraneko-${{ matrix.arch }}-apple-darwin-profdata-and-jarlog
        path: ~/artifacts

    - name: Setup ü™õ
      run: |
        if [[ -n ${{ inputs.MOZ_BUILD_DATE }} ]];then
          export MOZ_BUILD_DATE=${{ inputs.MOZ_BUILD_DATE }}
        fi

        cd $GITHUB_WORKSPACE

        # update noraneko to latest
        git submodule update --remote

        if [[ $GHA_ARCH == 'x86_64' ]];then
          cp ./.github/workflows/mozconfigs/macosx64-x86_64.mozconfig mozconfig
        else
          cp ./.github/workflows/mozconfigs/macosx64-aarch64.mozconfig mozconfig
        fi

        # Copy Noraneko Branding
        cp -r ./noraneko/gecko/branding/* ./browser/branding/

        sudo apt install msitools -y

        # SCCACHE START
        echo "mk_add_options 'export RUSTC_WRAPPER=/home/runner/.mozbuild/sccache/sccache'" >> mozconfig
        echo "mk_add_options 'export CCACHE_CPP2=yes'" >> mozconfig
        echo "ac_add_options --with-ccache=/home/runner/.mozbuild/sccache/sccache" >> mozconfig
        echo "mk_add_options 'export SCCACHE_GHA_ENABLED=on'" >> mozconfig
        # SCCACHE END

        # Debug
        if [[ $GHA_debug == 'true' ]]; then
          echo "ac_add_options --enable-debug" >> mozconfig
        fi

        if [[ $GHA_profgen == 'true' ]]; then
          echo 'ac_add_options --enable-profile-generate=cross' >> mozconfig
         elif [[ $GHA_profdata_jarlog_artifact_name == 'true' ]]; then
          echo 'export MOZ_LTO=cross' >> mozconfig
          echo 'ac_add_options --enable-profile-use=cross' >> mozconfig
          echo 'ac_add_options --with-pgo-profile-path=$(echo ~)/artifacts/merged.profdata' >> mozconfig
          echo 'ac_add_options --with-pgo-jarlog=$(echo ~)/artifacts/en-US.log' >> mozconfig
        fi

        # Chrome Format
        if [[ $GHA_flatChrome == 'true' ]]; then
          echo "ac_add_options --enable-chrome-format=flat" >> mozconfig
        fi
        # Enable Flat Package

        ./mach --no-interactive bootstrap --application-choice browser
      env:
        GHA_ARCH: ${{matrix.arch}}
        GHA_debug: ${{inputs.debug}}
        GHA_release: ${{inputs.release}}
        GHA_codecov: ${{inputs.code-coverage}}
        GHA_profgen: ${{ inputs.profile-generate-mode }}
        GHA_profdata_jarlog_artifact_name : ${{inputs.build-with-profdata-and-jarlog}}
        GHA_flatChrome: ${{ inputs.flat-chrome }}

    - name: Mach Configure
      run: |
        if [[ -n ${{ inputs.MOZ_BUILD_DATE }} ]];then
          export MOZ_BUILD_DATE=${{ inputs.MOZ_BUILD_DATE }}
        fi

        ./mach configure

    - name: Build üî®
      run: |
        if [[ -n ${{ inputs.MOZ_BUILD_DATE }} ]];then
          export MOZ_BUILD_DATE=${{ inputs.MOZ_BUILD_DATE }}
        fi

        ./mach build
        ./mach package
        rm -rf ~/.cargo

    - name: Copy & Compress Artifacts üìÅ
      run: |
        mkdir ~/output
        if [[ $GHA_ARCH == 'aarch64' ]];then
          arch="aarch64"
        else
          arch="x86_64"
        fi

        if [[ $GHA_profgen = 'true' ]];then
        tar zcvf ${arch}-apple-darwin-output.tar.xz ./obj-${arch}-apple-darwin/dist/*.dmg
          mv ${arch}-apple-darwin-output.tar.xz ~/output/
        else
          tar -czf noraneko-${arch}-apple-darwin-with-pgo.tar.gz ./obj-${arch}-apple-darwin/dist/
          mv noraneko-${arch}-apple-darwin-with-pgo.tar.gz ~/output/
        fi
      env:
        GHA_profgen: ${{ inputs.profile-generate-mode }}
        GHA_ARCH: ${{ matrix.arch }}

    # Publish START
    - name: Publish PackageüéÅ
      uses: actions/upload-artifact@v4
      with:
        name: noraneko-mac-${{ matrix.arch }}-${{fromJson('["package","build-with-profgen"]')[inputs.profile-generate-mode]}}
        compression-level: 9
        path: ~/output/
    # Publish END
